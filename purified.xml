<program>				:		<moduleDeclarations> <otherModules> <driverModule> <otherModules>
<moduleDeclarations>	:		{ ID } 
<otherModules>			:		{ <module> }
<driverModule>			:		<!-- DRIVERDEF DRIVER PROGRAM DRIVERENDDEF --> <moduleDef>
<module>				:		ID <input_plist> <output_plist> <moduleDef>
<input_plist>			:		{ ID <dataType> }  
<output_plist>			:		{ ID (INTEGER/REAL/BOOLEAN) }
<dataType>				:		(INTEGER/REAL/BOOLEAN)
<dataType>				:		ARRAY <!-- SQBO --> <range> <!-- SQBC OF --> (INTEGER/REAL/BOOLEAN)
<moduleDef>				:		<!-- START --> <statements> <!-- END -->
<statements>			:		{ <ioStmt> / <simpleStmt> / <declareStmt> / <condionalStmt> / <iterativeStmt> }




<ioStmt>				:		GET_VALUE <!-- BO --> ID <whichId> <!-- BC SEMICOL -->
<ioStmt>				:		PRINT <!-- BO --> <print_val> <!-- BC SEMICOL -->
<print_val>				:		ID <whichId>
<print_val>				:		NUM
<print_val>				:		RNUM
<print_val>				:		TRUE
<print_val>				:		FALSE

<whichId>				:		<!-- SQBO --> <index> <!-- SQBC -->
<!-- <whichId>				:		EMPTY -->
<index>					:		NUM
<index>					:		ID
<simpleStmt>			:		<assignmentStmt>
<simpleStmt>			:		<moduleReuseStmt>
<assignmentStmt>		:		ID <whichId> ASSIGNOP <expression> <!-- SEMICOL -->
<moduleReuseStmt>		:		<optional> <!-- USE MODULE --> ID <!-- WITH PARAMETERS --> <idList> <!-- SEMICOL -->
<optional>				:		<!-- SQBO --> <idList> <!-- SQBC --> ASSIGNOP
<!-- <optional>				:		EMPTY -->

<!-- <idList>				:		ID <idListRec> -->

modified 
<idList>				:		{ ID }

<!-- <idListRec>				:		COMMA ID <idListRec> -->
<!-- <idListRec>				:		EMPTY  -->


<expression>			:		<arithOrBoolExpr>
<expression>			:		MINUS <!-- BO --> <arithmeticExpr> <!-- BC -->
<arithOrBoolExpr> 		: 		<anyTerm> <arithOrBoolExprRec>
<arithOrBoolExprRec> 	:		<logicalOp> <anyTerm> <arithOrBoolExprRec>
<!-- <arithOrBoolExprRec> 	:		EMPTY -->

<anyTerm> 				:		<arithmeticExpr> <anyTermRec>
<anyTermRec> 			:		<relationalOp> <arithmeticExpr> <anyTermRec>
<!-- <anyTermRec> 			:		EMPTY -->

<arithmeticExpr>		:		<term> <arithmeticExprRec>
<arithmeticExprRec>		:		<pm> <term> <arithmeticExprRec>
<!-- <arithmeticExprRec>		:		EMPTY  -->

<term>					:		<factor> <termRec>
<termRec>				:		<md> <factor> <termRec>
<!-- <termRec>				:		EMPTY -->

<factor>				:		<!-- BO --> <arithOrBoolExpr> <!-- BC -->
<factor>				:		<var>

<var>					:		ID <whichId>
<var>					:		NUM
<var>					:		RNUM

<pm>					:		PLUS
<pm>					:		MINUS
<md>					:		MUL
<md>					:		DIV
<logicalOp>				:		AND
<logicalOp>				:		OR
<relationalOp>			:		LT
<relationalOp>			:		LE
<relationalOp>			:		GT
<relationalOp>			:		GE
<relationalOp>			:		EQ
<relationalOp>			:		NE

<declareStmt>			:		<!-- DECLARE --> <idList> <!-- COLON --> <dataType> <!-- SEMICOL -->

<condionalStmt>			:		<!-- SWITCH BO --> <expression> <!-- BC START --> <caseStmts> <default><!--  END -->
<caseStmts>				:		<!-- CASE --> <value> <!-- COLON --> <statements> <!-- BREAK SEMICOL --> <caseStmtsRec>
<caseStmtsRec>			:		<!-- CASE --> <value> <!-- COLON --> <statements> <!-- BREAK SEMICOL --> <caseStmtsRec>

<!-- <caseStmtsRec>			:		EMPTY -->
<value>					:		NUM
<value>					:		TRUE
<value>					:		FALSE

<default>				:		<!-- DEFAULT COLON --> <statements> <!-- BREAK SEMICOL -->
<!-- <default>				:		EMPTY -->
<iterativeStmt>			:		FOR <!-- BO --> ID <!-- IN --> <range> <!-- BC START --> <statements> <!-- END -->
<iterativeStmt>			:		WHILE <!-- BO --> <arithOrBoolExpr> <!-- BC START --> <statements> <!-- END -->
<range>					:		NUM <!-- RANGEOP --> NUM





