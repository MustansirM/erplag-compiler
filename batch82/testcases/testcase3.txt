
declare module diff;
declare module square;
declare module plus;
declare module minus;

<<module diff>>
takes input [x : integer];
returns [value:integer];
start
	value:= x*x;
end

<<module square>>
takes input [x:integer, z:boolean, alpha : array [0..5] of integer];
start
	declare q : array [0..4] of real;
	declare w, e,r,t,y,p,u : integer;
	declare value,i,o : integer;
	value:=  q[1] > ( e > r ) ;
	value:= -(e + t);
end

<<<driver program>>>
start
	declare v_1_2_3,i,i,j,x,a:integer;
	declare ar : array [0..5] of integer;
	declare adj,i : real;
	declare bl : boolean;
	get_value(ar[10]);
	declare result_:integer;
	print(ar[adj]);

	[result_]:=use module square with parameters v_1_2_3, ar;

	while (i)
	start 
		x := b;
		for (adj in 0..12)
		start 
			j := 0;
		end
	end

end


**notice that this test case does not declare the module before the driver module, still it is syntactically correct
as moduleDeclarations is optional. Testing whether a module is declared before usage is a matter of semantic analysis**
