

<program>				:		<moduleDeclarations> <otherModules> <driverModule> <otherModules>
<moduleDeclarations>	:		<moduleDeclaration> <moduleDeclarations> | ε
<moduleDeclaration>		: 		DECLARE MODULE ID SEMICOL
<otherModules>			:		<module> <otherModules> | ε
<driverModule> 			: 		DEF DRIVER PROGRAM ENDDEF <moduleDef>
<module>  				: 		DEF MODULE ID ENDDEF <arguments> <ret> <moduleDef>
<arguments> 			: 		TAKES INPUT SQBO <argList> SQBC SEMICOL
<ret> 					: 		RETURNS SQBO <retList> SQBC SEMICOL 
<argList> 				:		<argList> COMMA ID COLON <dataType> | ID COLON <dataType> 
<retList> 				:		<retList> COMMA ID COLON <type> | ID COLON <type>
<type> 					:		INTEGER | REAL | BOOLEAN
<dataType> 				: 		<type> | ARRAY SQBO <range> SQBC of <type>
<moduleDef> 			: 		START <statements> END
<statements> 			:		<statement> <statements> | ε
<statement> 			:		<ioStmt> | <simpleStmt> | <declareStmt> | <condionalStmt> | <iterativeStmt> | SEMICOL
<ioStmt> 				:		GET_VALUE BO ID BC SEMICOL | PRINT BO <var> BC SEMICOL
<var> 					:		ID <whichId> | NUM | RNUM
<whichId> 				: 		SQBO ID SQBC | ε
<simpleStmt> 			:		<assignmentStmt> | <moduleReuseStmt>
<assignmentStmt> 		:		ID <whichStmt>
<whichStmt>				:		<lvalueIDStmt> | <lvalueARRStmt>
<lvalueIDStmt> 			:		ASSIGNOP <expression> SEMICOL
<lvalueARRStmt> 		:	 	SQBO <index> SQBC ASSIGNOP <expression> SEMICOL
<index> 				:		NUM | ID
<moduleReuseStmt> 		:		<optional> USE MODULE ID WITH PARAMETERS <idList> SEMICOL
<optional> 				:		SQBO <idList> SQBC ASSIGNOP | ε
<idList> 				:		<idList> COMMA ID | ID
<expression> 			:		<arithmeticExpr> | <booleanExpr>
<arithmeticExpr> 		:		<arithmeticExpr> <pm> <term> | <term>
<term> 					:		<term> <md> <factor> | <factor>
<factor> 				:		BO <arithmeticExpr> BC | <var>
<pm> 					:		PLUS | MINUS
<md> 					:		MUL | DIV
<booleanExpr> 			:		<booleanExpr> <logicalOp> <booleanSegment>
<booleanSegment> 		:		<arithmeticExpr> <relationalOp> <arithmeticExpr>
<booleanSegment> 		:		BO <booleanExpr> BC
<relationalOp> 			: 		LT | LE | GT | GE | EQ | NE
<declareStmt> 			:		DECLARE <idList> COLON <dataType> SEMICOL
<condionalStmt> 		:		SWITCH BO <expression> BC START <caseStmt><default> END
<caseStmt> 				:		CASE <value> COLON <statements> BREAK SEMICOL <caseStmt>
<value> 				:		NUM | TRUE | FALSE
<default> 				:		DEFAULT COLON <statements> BREAK SEMICOL | ε
<iterativeStmt> 		:		FOR BO ID IN <range> BC START <statements> END | WHILE BO <booleanExpr> BC START <statements> END
<range> 				:		NUM RANGEOP NUM 




