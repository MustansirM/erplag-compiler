<program>				:		<moduleDeclarations> <otherModules> <driverModule> <otherModules>
<moduleDeclarations>	:		<moduleDeclaration> <moduleDeclarations>
<moduleDeclarations>	:		ε
<moduleDeclaration>		: 		DECLARE MODULE ID SEMICOL
<otherModules>			:		<module> <otherModules>
<otherModules>			:		ε
<driverModule> 			: 		DEF DRIVER PROGRAM ENDDEF <moduleDef>
<module>  				: 		DEF MODULE ID ENDDEF TAKES INPUT SQBO <input_plist> SQBC SEMICOL <ret> <moduleDef>
<ret> 					: 		RETURNS SQBO <output_plist> SQBC SEMICOL
<ret> 					: 		ε
<input_plist> 			:		ID COLON <dataType> <input_plistRec>
<input_plistRec> 		:		COMMA ID COLON <dataType> <input_plistRec>
<input_plistRec> 		:		ε
<output_plist> 			:		ID COLON <type> <output_plistRec>
<output_plistRec> 		:		COMMA ID COLON <type> <output_plistRec>
<output_plistRec> 		:		ε
<type> 					:		INTEGER
<type> 					:		REAL
<type> 					:		BOOLEAN
<dataType> 				: 		<type>
<dataType> 				: 		ARRAY SQBO <range> SQBC OF <type>
<moduleDef> 			: 		START <statements> END
<statements> 			:		<statement> <statements>
<statements> 			:		ε
<statement> 			:		<ioStmt>
<statement> 			:		<simpleStmt>
<statement> 			:		<declareStmt>
<statement> 			:		<condionalStmt>
<statement> 			:		<iterativeStmt>
<statement> 			:		SEMICOL
<ioStmt> 				:		GET_VALUE BO ID <whichId> BC SEMICOL
<ioStmt> 				:		PRINT BO <print_val> BC SEMICOL
<print_val> 			:		ID <whichId>
<print_val> 			:		NUM
<print_val> 			:		RNUM
<print_val> 			:		TRUE
<print_val> 			:		FALSE
<whichId> 				: 		SQBO <index> SQBC
<whichId> 				: 		ε
<index> 				:		NUM
<index> 				:		ID
<simpleStmt> 			:		<assignmentStmt>
<simpleStmt> 			:		<moduleReuseStmt>
<assignmentStmt> 		:		ID <whichId> ASSIGNOP <expression> SEMICOL
<moduleReuseStmt> 		:		<optional> USE MODULE ID WITH PARAMETERS <idList> SEMICOL
<optional> 				:		SQBO <idList> SQBC ASSIGNOP
<optional> 				:		ε
<idList> 				:		ID <idListRec>
<idListRec> 			:		COMMA ID <idListRec>
<idListRec> 			:		ε 
<expression> 			:		<arithmeticExpr>
<expression> 			:		<booleanExpr>
<arithmeticExpr> 		:		<term> <arithmeticExprRec>
<arithmeticExprRec> 	:		<pm> <term> <arithmeticExprRec>
<arithmeticExprRec> 	:		ε 
<term> 					:		<factor> <termRec>
<termRec> 				:		<md> <factor> <termRec>
<termRec> 				:		ε
<factor> 				:		BO <arithmeticExpr> BC
<factor> 				:		<var>
<var> 					:		ID <whichId>
<var> 					:		NUM
<var> 					:		RNUM
<pm> 					:		PLUS
<pm> 					:		MINUS
<md> 					:		MUL
<md> 					:		DIV
<booleanExpr> 			:		<booleanSegment> <booleanExprRec>
<booleanExprRec> 		:		<logicalOp> <booleanSegment> <booleanExprRec>
<booleanExprRec> 		:		ε
<logicalOp> 			:		AND
<logicalOp> 			:		OR
<booleanSegment> 		:		<arithmeticExpr> <relationalOp> <arithmeticExpr>
<booleanSegment> 		:		BO <booleanExpr> BC
<relationalOp> 			: 		LT
<relationalOp> 			: 		LE
<relationalOp> 			: 		GT
<relationalOp> 			: 		GE
<relationalOp> 			: 		EQ
<relationalOp> 			: 		NE
<declareStmt> 			:		DECLARE <idList> COLON <dataType> SEMICOL
<condionalStmt> 		:		SWITCH BO <expression> BC START <caseStmt> <default> END
<caseStmt> 				:		CASE <value> COLON <statements> BREAK SEMICOL <caseStmt>
<value> 				:		NUM
<value> 				:		TRUE
<value> 				:		FALSE
<default> 				:		DEFAULT COLON <statements> BREAK SEMICOL
<default> 				:		ε
<iterativeStmt> 		:		FOR BO ID IN <range> BC START <statements> END
<iterativeStmt> 		:		WHILE BO <booleanExpr> BC START <statements> END
<range> 				:		NUM RANGEOP NUM 




